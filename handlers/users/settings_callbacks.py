from aiogram import types
from aiogram.utils.markdown import hbold, hcode

from data.db_models import Chat
from keyboards.inline.callback_datas import settings_callback, settings_mute_dead_callback, \
    settings_mute_no_players_callback, settings_reg_time_callback, settings_night_time_callback, \
    settings_day_time_callback, settings_voting_time_callback, settings_accept_time_callback, settings_pin_callback, \
    settings_boosts_callback, settings_show_roles_callback, settings_show_votes_callback, \
    settings_show_hello_msg_callback, settings_allow_att_callback

from keyboards.inline.settings import settings_kb_mute, settings_kb_show_to_admin, settings_kb_mute_dead, \
    settings_kb_mute_no_players, settings_kb_timings, settings_kb_reg_time, settings_kb_some, settings_kb_nighttime, \
    settings_kb_daytime, settings_kb_voting_time, settings_kb_accept_time, settings_kb_pin, settings_kb_boosts, \
    settings_kb_show_roles, settings_kb_show_votes, settings_kb_show_hello_msg, settings_kb_allow_att
from loader import dp, db


@dp.callback_query_handler(settings_callback.filter())
async def settings_cbq(cbq: types.CallbackQuery, callback_data: dict):
    chat_id = int(callback_data.get('chat_id'))
    action = callback_data.get('action')

    if cbq.from_user not in [member.user for member in await dp.bot.get_chat_administrators(chat_id)]:
        await cbq.answer('–í—ã —É–∂–µ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞!')
        return await cbq.message.delete()

    chat_data: Chat = await db.get_chat(chat_id)

    if action == 'exit':
        await cbq.message.edit_text('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!')

    elif action == 'menu':
        await cbq.message.edit_text(f"–ö–∞–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ—Å–µ–¥—ã –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å?\n\n"
                                    f"{hbold('üïó –¢–∞–π–º–∏–Ω–≥–∏:')}\n"
                                    f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {chat_data.register_time}\n"
                                    f"–ù–æ—á—å: {chat_data.night_time}\n"
                                    f"–î–µ–Ω—å: {chat_data.day_time}\n"
                                    f"–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ: {chat_data.vote_time}\n"
                                    f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: {chat_data.accept_time}\n\n"
                                    f"{hbold('ü§¨ –ú–æ–ª—á–∞–Ω–∫–∞:')}\n"
                                    f"–ò–∑–≥–Ω–∞–Ω—ã–µ –≥–æ–≤–æ—Ä—è—Ç: {'–î–∞' if chat_data.is_dead_talk else '–ù–µ—Ç'}\n"
                                    f"–ù–µ –∏–≥—Ä–∞—é—â–∏–µ –≥–æ–≤–æ—Ä—è—Ç: {'–î–∞' if chat_data.is_nonplayers_talk else '–ù–µ—Ç'}\n\n"
                                    f"{hbold('üí¨ –û—Å—Ç–∞–ª—å–Ω–æ–µ')}\n"
                                    f"–ü–∏–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {'–î–∞' if chat_data.is_pin_register else '–ù–µ—Ç'}\n"
                                    f"–ë—É—Å—Ç–µ—Ä—ã: {'–î–∞' if chat_data.is_active_boosts else '–ù–µ—Ç'}\n"
                                    f"–ü–æ–∫–∞–∑ —Ä–æ–ª–µ–π: {'–î–∞' if chat_data.is_show_dead_roles else '–ù–µ—Ç'}\n"
                                    f"–¢–∞–π–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ: {'–î–∞' if chat_data.is_show_day_votes else '–ù–µ—Ç'}\n"
                                    f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {'–î–∞' if chat_data.is_show_hello_msg else '–ù–µ—Ç'}\n"
                                    f"–†–∞–∑—Ä–µ—à–∞—Ç—å –º–µ–¥–∏–∞ –ø—Ä–∏ —Ä–∞–∑–º—É—Ç–µ: {'–î–∞' if chat_data.is_allow_attachments_unmute else '–ù–µ—Ç'}",
                                    reply_markup=settings_kb_show_to_admin(chat_id))
    elif action == 'mute':
        await cbq.message.edit_text(f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å, —á—å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —è –±—É–¥—É —É–¥–∞–ª—è—Ç—å –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã.\n\n"
                                    f"{hbold('–ò–∑–≥–Ω–∞–Ω—ã–µ –≥–æ–≤–æ—Ä—è—Ç')}: {'–î–∞' if chat_data.is_dead_talk else '–ù–µ—Ç'}\n"
                                    f"{hbold('–ù–µ –∏–≥—Ä–∞—é—â–∏–µ –≥–æ–≤–æ—Ä—è—Ç')}: {'–î–∞' if chat_data.is_nonplayers_talk else '–ù–µ—Ç'}",
                                    reply_markup=settings_kb_mute(chat_id))
    elif action == 'mute_dead':
        await cbq.message.edit_text('–£–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ—Ö, –∫–æ–≥–æ –∏–∑–≥–Ω–∞–ª–∏?\n\n'
                                    f"{hbold('–ò–∑–≥–Ω–∞–Ω—ã–µ –≥–æ–≤–æ—Ä—è—Ç')}: {'–î–∞' if chat_data.is_dead_talk else '–ù–µ—Ç'}",
                                    reply_markup=settings_kb_mute_dead(chat_id))

    elif action == 'mute_not_players':
        await cbq.message.edit_text('–£–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∏–≥—Ä–∞—é—Ç?\n\n'
                                    f"{hbold('–ù–µ –∏–≥—Ä–∞—é—â–∏–µ –≥–æ–≤–æ—Ä—è—Ç')}: {'–î–∞' if chat_data.is_nonplayers_talk else '–ù–µ—Ç'}",
                                    reply_markup=settings_kb_mute_no_players(chat_id))

    elif action == 'timings':
        await cbq.message.edit_text('–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–∞–π–º–∏–Ω–≥–∏ —Ñ–∞–∑.\n\n'
                                    f"{hbold('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')}: {chat_data.register_time}\n"
                                    f"{hbold('–ù–æ—á—å')}: {chat_data.night_time}\n"
                                    f"{hbold('–î–µ–Ω—å')}: {chat_data.day_time}\n"
                                    f"{hbold('–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ')}: {chat_data.vote_time}\n"
                                    f"{hbold('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ')}: {chat_data.accept_time}",
                                    reply_markup=settings_kb_timings(chat_id))

    elif action == 'reg_time':
        await cbq.message.edit_text('–í—Ä–µ–º—è –æ—Ç–≤–æ–¥–∏–º–æ–µ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö).\n'
                                    f'–ö–æ–º–∞–Ω–¥–∞ {hcode("/extend")} –ø—Ä–æ–¥–ª–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –≤—Ä–µ–º—è –≤ 2 —Ä–∞–∑–∞ –º–µ–Ω—å—à–µ–µ,'
                                    ' —á–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n\n'
                                    f"{hbold('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')}: {chat_data.register_time}",
                                    reply_markup=settings_kb_reg_time(chat_id))

    elif action == 'night_time':
        await cbq.message.edit_text('–í—Ä–µ–º—è –æ—Ç–≤–æ–¥–∏–º–æ–µ –Ω–∞ –Ω–æ—á—å (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö).\n\n'
                                    f"{hbold('–ù–æ—á—å')}: {chat_data.night_time}",
                                    reply_markup=settings_kb_nighttime(chat_id))

    elif action == 'day_time':
        await cbq.message.edit_text('–í—Ä–µ–º—è –æ—Ç–≤–æ–¥–∏–º–æ–µ –Ω–∞ –¥–Ω–µ–≤–Ω–æ–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö).\n\n'
                                    f"{hbold('–î–µ–Ω—å')}: {chat_data.day_time}",
                                    reply_markup=settings_kb_daytime(chat_id))

    elif action == 'voting_time':
        await cbq.message.edit_text('–í—Ä–µ–º—è –æ—Ç–≤–æ–¥–∏–º–æ–µ –Ω–∞ –¥–Ω–µ–≤–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö).\n\n'
                                    f"{hbold('–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ')}: {chat_data.vote_time}",
                                    reply_markup=settings_kb_voting_time(chat_id))

    elif action == 'accept_time':
        await cbq.message.edit_text('–í—Ä–µ–º—è –æ—Ç–≤–æ–¥–∏–º–æ–µ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö).\n\n'
                                    f"{hbold('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ')}: {chat_data.accept_time}",
                                    reply_markup=settings_kb_accept_time(chat_id))

    elif action == 'some':
        await cbq.message.edit_text('–û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n\n'
                                    f"{hbold('–ü–∏–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')}: {'–î–∞' if chat_data.is_pin_register else '–ù–µ—Ç'}\n"
                                    f"{hbold('–ë—É—Å—Ç–µ—Ä—ã')}: {'–î–∞' if chat_data.is_active_boosts else '–ù–µ—Ç'}\n"
                                    f"{hbold('–ü–æ–∫–∞–∑ —Ä–æ–ª–µ–π')}: {'–î–∞' if chat_data.is_show_dead_roles else '–ù–µ—Ç'}\n"
                                    f"{hbold('–¢–∞–π–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ')}: {'–î–∞' if chat_data.is_show_day_votes else '–ù–µ—Ç'}\n"
                                    f"{hbold('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')}: {'–î–∞' if chat_data.is_show_hello_msg else '–ù–µ—Ç'}\n"
                                    f"{hbold('–†–∞–∑—Ä–µ—à–∞—Ç—å –º–µ–¥–∏–∞ –ø—Ä–∏ —Ä–∞–∑–º—É—Ç–µ')}: {'–î–∞' if chat_data.is_allow_attachments_unmute else '–ù–µ—Ç'}",
                                    reply_markup=settings_kb_some(chat_id))

    elif action == 'pin':
        await cbq.message.edit_text('–ó–∞–∫—Ä–µ–ø–ª—è—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π?\n\n'
                                    f"{hbold('–ü–∏–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')}: {'–î–∞' if chat_data.is_pin_register else '–ù–µ—Ç'}",
                                    reply_markup=settings_kb_pin(chat_id))

    elif action == 'boosts':
        await cbq.message.edit_text('–í–∫–ª—é—á–∏—Ç—å –±—É—Å—Ç–µ—Ä—ã (–ø–æ–¥–¥–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–ª–∏)?\n\n'
                                    f"{hbold('–ë—É—Å—Ç–µ—Ä—ã')}: {'–î–∞' if chat_data.is_active_boosts else '–ù–µ—Ç'}",
                                    reply_markup=settings_kb_boosts(chat_id))

    elif action == 'show_roles':
        await cbq.message.edit_text('–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–æ–ª–∏ –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–±—ã–ª–∏ –∏–∑ –∏–≥—Ä—ã?\n\n'
                                    f"{hbold('–ü–æ–∫–∞–∑ —Ä–æ–ª–µ–π')}: {'–î–∞' if chat_data.is_show_dead_roles else '–ù–µ—Ç'}",
                                    reply_markup=settings_kb_show_roles(chat_id))

    elif action == 'show_votes':
        await cbq.message.edit_text('–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫—Ç–æ –∑–∞ –∫–æ–≥–æ –≥–æ–ª–æ—Å—É–µ—Ç –Ω–∞ –¥–Ω–µ–≤–Ω–æ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏?\n\n'
                                    f"{hbold('–¢–∞–π–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ')}: {'–î–∞' if chat_data.is_show_day_votes else '–ù–µ—Ç'}",
                                    reply_markup=settings_kb_show_votes(chat_id))
    elif action == 'show_hello_msg':
        await cbq.message.edit_text('–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –≤—Ö–æ–¥—è—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é?\n\n'
                                    f"{hbold('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')}: {'–î–∞' if chat_data.is_show_hello_msg else '–ù–µ—Ç'}",
                                    reply_markup=settings_kb_show_hello_msg(chat_id))
    elif action == 'allow_att':
        await cbq.message.edit_text('–†–∞–∑—Ä–µ—à–∞—Ç—å –ª–∏ –º–µ–¥–∏–∞ (–∫–∞—Ä—Ç–∏–Ω–∫–∏, –≥–∏—Ñ, —Å—Ç–∏–∫–µ—Ä—ã, –≥—Å) –ø—Ä–∏ —Ä–∞–∑–º—É—Ç–µ —á–∞—Ç–∞ –¥–Ω—ë–º?\n\n'
                                    f"{hbold('–†–∞–∑—Ä–µ—à–∞—Ç—å –º–µ–¥–∏–∞ –ø—Ä–∏ —Ä–∞–∑–º—É—Ç–µ')}: {'–î–∞' if chat_data.is_allow_attachments_unmute else '–ù–µ—Ç'}",
                                    reply_markup=settings_kb_allow_att(chat_id))
    else:
        await cbq.answer('–°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ–± –æ—à–∏–±–∫–µ N143...')


@dp.callback_query_handler(settings_mute_dead_callback.filter())
async def stg_mute_dead(cbq: types.CallbackQuery, callback_data: dict):
    chat_id = int(callback_data.get('chat_id'))
    action = callback_data.get('action')

    if cbq.from_user not in [member.user for member in await dp.bot.get_chat_administrators(chat_id)]:
        await cbq.answer('–í—ã —É–∂–µ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞!')
        return await cbq.message.delete()

    if action in ['yes', 'no']:
        if action == 'yes':
            await db.set_chat(chat_id, is_dead_talk=0)
        elif action == 'no':
            await db.set_chat(chat_id, is_dead_talk=1)
        await cbq.answer('–£—Å–ø–µ—à–Ω–æ!')
        chat_data: Chat = await db.get_chat(chat_id)
        await cbq.message.edit_text(f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å, —á—å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —è –±—É–¥—É —É–¥–∞–ª—è—Ç—å –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã.\n\n"
                                    f"{hbold('–ò–∑–≥–Ω–∞–Ω—ã–µ –≥–æ–≤–æ—Ä—è—Ç')}: {'–î–∞' if chat_data.is_dead_talk else '–ù–µ—Ç'}\n"
                                    f"{hbold('–ù–µ –∏–≥—Ä–∞—é—â–∏–µ –≥–æ–≤–æ—Ä—è—Ç')}: {'–î–∞' if chat_data.is_nonplayers_talk else '–ù–µ—Ç'}",
                                    reply_markup=settings_kb_mute(chat_id))
    else:
        await cbq.answer('–û—à–∏–±–∫–∞ stg_mute_dead')


@dp.callback_query_handler(settings_mute_no_players_callback.filter())
async def stg_mute_no_players(cbq: types.CallbackQuery, callback_data: dict):
    chat_id = int(callback_data.get('chat_id'))
    action = callback_data.get('action')

    if cbq.from_user not in [member.user for member in await dp.bot.get_chat_administrators(chat_id)]:
        await cbq.answer('–í—ã —É–∂–µ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞!')
        return await cbq.message.delete()

    if action in ['yes', 'no']:
        if action == 'yes':
            await db.set_chat(chat_id, is_nonplayers_talk=0)
        elif action == 'no':
            await db.set_chat(chat_id, is_nonplayers_talk=1)
        await cbq.answer('–£—Å–ø–µ—à–Ω–æ!')
        chat_data: Chat = await db.get_chat(chat_id)
        await cbq.message.edit_text(f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å, —á—å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —è –±—É–¥—É —É–¥–∞–ª—è—Ç—å –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã.\n\n"
                                    f"{hbold('–ò–∑–≥–Ω–∞–Ω—ã–µ –≥–æ–≤–æ—Ä—è—Ç')}: {'–î–∞' if chat_data.is_dead_talk else '–ù–µ—Ç'}\n"
                                    f"{hbold('–ù–µ –∏–≥—Ä–∞—é—â–∏–µ –≥–æ–≤–æ—Ä—è—Ç')}: {'–î–∞' if chat_data.is_nonplayers_talk else '–ù–µ—Ç'}",
                                    reply_markup=settings_kb_mute(chat_id))
    else:
        await cbq.answer('–û—à–∏–±–∫–∞ stg_mute_no_players')


@dp.callback_query_handler(settings_reg_time_callback.filter())
async def stg_reg_time(cbq: types.CallbackQuery, callback_data: dict):
    chat_id = int(callback_data.get('chat_id'))
    action = int(callback_data.get('action'))

    if cbq.from_user not in [member.user for member in await dp.bot.get_chat_administrators(chat_id)]:
        await cbq.answer('–í—ã —É–∂–µ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞!')
        return await cbq.message.delete()

    if action in [30, 45, 60, 80, 120, 240]:
        await db.set_chat(chat_id, register_time=action)
        await cbq.answer('–£—Å–ø–µ—à–Ω–æ!')
        chat_data: Chat = await db.get_chat(chat_id)
        await cbq.message.edit_text('–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–∞–π–º–∏–Ω–≥–∏ —Ñ–∞–∑.\n\n'
                                    f"{hbold('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')}: {chat_data.register_time}\n"
                                    f"{hbold('–ù–æ—á—å')}: {chat_data.night_time}\n"
                                    f"{hbold('–î–µ–Ω—å')}: {chat_data.day_time}\n"
                                    f"{hbold('–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ')}: {chat_data.vote_time}\n"
                                    f"{hbold('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ')}: {chat_data.accept_time}",
                                    reply_markup=settings_kb_timings(chat_id))
    else:
        await cbq.answer('–û—à–∏–±–∫–∞ stg_reg_time')


@dp.callback_query_handler(settings_night_time_callback.filter())
async def stg_night_time(cbq: types.CallbackQuery, callback_data: dict):
    chat_id = int(callback_data.get('chat_id'))
    action = int(callback_data.get('action'))

    if cbq.from_user not in [member.user for member in await dp.bot.get_chat_administrators(chat_id)]:
        await cbq.answer('–í—ã —É–∂–µ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞!')
        return await cbq.message.delete()

    if action in [30, 45, 60, 80, 120, 240]:
        await db.set_chat(chat_id, night_time=action)
        await cbq.answer('–£—Å–ø–µ—à–Ω–æ!')
        chat_data: Chat = await db.get_chat(chat_id)
        await cbq.message.edit_text('–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–∞–π–º–∏–Ω–≥–∏ —Ñ–∞–∑.\n\n'
                                    f"{hbold('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')}: {chat_data.register_time}\n"
                                    f"{hbold('–ù–æ—á—å')}: {chat_data.night_time}\n"
                                    f"{hbold('–î–µ–Ω—å')}: {chat_data.day_time}\n"
                                    f"{hbold('–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ')}: {chat_data.vote_time}\n"
                                    f"{hbold('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ')}: {chat_data.accept_time}",
                                    reply_markup=settings_kb_timings(chat_id))
    else:
        await cbq.answer('–û—à–∏–±–∫–∞ stg_night_time')


@dp.callback_query_handler(settings_day_time_callback.filter())
async def stg_day_time(cbq: types.CallbackQuery, callback_data: dict):
    chat_id = int(callback_data.get('chat_id'))
    action = int(callback_data.get('action'))

    if cbq.from_user not in [member.user for member in await dp.bot.get_chat_administrators(chat_id)]:
        await cbq.answer('–í—ã —É–∂–µ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞!')
        return await cbq.message.delete()

    if action in [30, 45, 60, 80, 120, 240]:
        await db.set_chat(chat_id, day_time=action)
        await cbq.answer('–£—Å–ø–µ—à–Ω–æ!')
        chat_data: Chat = await db.get_chat(chat_id)
        await cbq.message.edit_text('–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–∞–π–º–∏–Ω–≥–∏ —Ñ–∞–∑.\n\n'
                                    f"{hbold('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')}: {chat_data.register_time}\n"
                                    f"{hbold('–ù–æ—á—å')}: {chat_data.night_time}\n"
                                    f"{hbold('–î–µ–Ω—å')}: {chat_data.day_time}\n"
                                    f"{hbold('–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ')}: {chat_data.vote_time}\n"
                                    f"{hbold('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ')}: {chat_data.accept_time}",
                                    reply_markup=settings_kb_timings(chat_id))
    else:
        await cbq.answer('–û—à–∏–±–∫–∞ stg_day_time')


@dp.callback_query_handler(settings_voting_time_callback.filter())
async def stg_voting_time(cbq: types.CallbackQuery, callback_data: dict):
    chat_id = int(callback_data.get('chat_id'))
    action = int(callback_data.get('action'))

    if cbq.from_user not in [member.user for member in await dp.bot.get_chat_administrators(chat_id)]:
        await cbq.answer('–í—ã —É–∂–µ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞!')
        return await cbq.message.delete()

    if action in [30, 45, 60, 80, 120, 240]:
        await db.set_chat(chat_id, vote_time=action)
        await cbq.answer('–£—Å–ø–µ—à–Ω–æ!')
        chat_data: Chat = await db.get_chat(chat_id)
        await cbq.message.edit_text('–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–∞–π–º–∏–Ω–≥–∏ —Ñ–∞–∑.\n\n'
                                    f"{hbold('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')}: {chat_data.register_time}\n"
                                    f"{hbold('–ù–æ—á—å')}: {chat_data.night_time}\n"
                                    f"{hbold('–î–µ–Ω—å')}: {chat_data.day_time}\n"
                                    f"{hbold('–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ')}: {chat_data.vote_time}\n"
                                    f"{hbold('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ')}: {chat_data.accept_time}",
                                    reply_markup=settings_kb_timings(chat_id))
    else:
        await cbq.answer('–û—à–∏–±–∫–∞ stg_voting_time')


@dp.callback_query_handler(settings_accept_time_callback.filter())
async def stg_accept_time(cbq: types.CallbackQuery, callback_data: dict):
    chat_id = int(callback_data.get('chat_id'))
    action = int(callback_data.get('action'))

    if cbq.from_user not in [member.user for member in await dp.bot.get_chat_administrators(chat_id)]:
        await cbq.answer('–í—ã —É–∂–µ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞!')
        return await cbq.message.delete()

    if action in [30, 45, 60, 80, 120, 240]:
        await db.set_chat(chat_id, accept_time=action)
        await cbq.answer('–£—Å–ø–µ—à–Ω–æ!')
        chat_data: Chat = await db.get_chat(chat_id)
        await cbq.message.edit_text('–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–∞–π–º–∏–Ω–≥–∏ —Ñ–∞–∑.\n\n'
                                    f"{hbold('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')}: {chat_data.register_time}\n"
                                    f"{hbold('–ù–æ—á—å')}: {chat_data.night_time}\n"
                                    f"{hbold('–î–µ–Ω—å')}: {chat_data.day_time}\n"
                                    f"{hbold('–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ')}: {chat_data.vote_time}\n"
                                    f"{hbold('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ')}: {chat_data.accept_time}",
                                    reply_markup=settings_kb_timings(chat_id))
    else:
        await cbq.answer('–û—à–∏–±–∫–∞ stg_accept_time')


@dp.callback_query_handler(settings_pin_callback.filter())
async def stg_pin(cbq: types.CallbackQuery, callback_data: dict):
    chat_id = int(callback_data.get('chat_id'))
    action = callback_data.get('action')

    if cbq.from_user not in [member.user for member in await dp.bot.get_chat_administrators(chat_id)]:
        await cbq.answer('–í—ã —É–∂–µ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞!')
        return await cbq.message.delete()

    if action in ['yes', 'no']:
        if action == 'yes':
            await db.set_chat(chat_id, is_pin_register=1)
        elif action == 'no':
            await db.set_chat(chat_id, is_pin_register=0)
        await cbq.answer('–£—Å–ø–µ—à–Ω–æ!')
        chat_data: Chat = await db.get_chat(chat_id)
        await cbq.message.edit_text('–û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n\n'
                                    f"{hbold('–ü–∏–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')}: {'–î–∞' if chat_data.is_pin_register else '–ù–µ—Ç'}\n"
                                    f"{hbold('–ë—É—Å—Ç–µ—Ä—ã')}: {'–î–∞' if chat_data.is_active_boosts else '–ù–µ—Ç'}\n"
                                    f"{hbold('–ü–æ–∫–∞–∑ —Ä–æ–ª–µ–π')}: {'–î–∞' if chat_data.is_show_dead_roles else '–ù–µ—Ç'}\n"
                                    f"{hbold('–¢–∞–π–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ')}: {'–î–∞' if chat_data.is_show_day_votes else '–ù–µ—Ç'}\n"
                                    f"{hbold('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')}: {'–î–∞' if chat_data.is_show_hello_msg else '–ù–µ—Ç'}\n"
                                    f"{hbold('–†–∞–∑—Ä–µ—à–∞—Ç—å –º–µ–¥–∏–∞ –ø—Ä–∏ —Ä–∞–∑–º—É—Ç–µ')}: {'–î–∞' if chat_data.is_allow_attachments_unmute else '–ù–µ—Ç'}",
                                    reply_markup=settings_kb_some(chat_id))
    else:
        await cbq.answer('–û—à–∏–±–∫–∞ stg_pin')


@dp.callback_query_handler(settings_boosts_callback.filter())
async def stg_boosts(cbq: types.CallbackQuery, callback_data: dict):
    chat_id = int(callback_data.get('chat_id'))
    action = callback_data.get('action')

    if cbq.from_user not in [member.user for member in await dp.bot.get_chat_administrators(chat_id)]:
        await cbq.answer('–í—ã —É–∂–µ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞!')
        return await cbq.message.delete()

    if action in ['yes', 'no']:
        if action == 'yes':
            await db.set_chat(chat_id, is_active_boosts=1)
        elif action == 'no':
            await db.set_chat(chat_id, is_active_boosts=0)
        await cbq.answer('–£—Å–ø–µ—à–Ω–æ!')
        chat_data: Chat = await db.get_chat(chat_id)
        await cbq.message.edit_text('–û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n\n'
                                    f"{hbold('–ü–∏–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')}: {'–î–∞' if chat_data.is_pin_register else '–ù–µ—Ç'}\n"
                                    f"{hbold('–ë—É—Å—Ç–µ—Ä—ã')}: {'–î–∞' if chat_data.is_active_boosts else '–ù–µ—Ç'}\n"
                                    f"{hbold('–ü–æ–∫–∞–∑ —Ä–æ–ª–µ–π')}: {'–î–∞' if chat_data.is_show_dead_roles else '–ù–µ—Ç'}\n"
                                    f"{hbold('–¢–∞–π–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ')}: {'–î–∞' if chat_data.is_show_day_votes else '–ù–µ—Ç'}\n"
                                    f"{hbold('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')}: {'–î–∞' if chat_data.is_show_hello_msg else '–ù–µ—Ç'}\n"
                                    f"{hbold('–†–∞–∑—Ä–µ—à–∞—Ç—å –º–µ–¥–∏–∞ –ø—Ä–∏ —Ä–∞–∑–º—É—Ç–µ')}: {'–î–∞' if chat_data.is_allow_attachments_unmute else '–ù–µ—Ç'}",
                                    reply_markup=settings_kb_some(chat_id))
    else:
        await cbq.answer('–û—à–∏–±–∫–∞ stg_boosts')


@dp.callback_query_handler(settings_show_roles_callback.filter())
async def stg_show_roles(cbq: types.CallbackQuery, callback_data: dict):
    chat_id = int(callback_data.get('chat_id'))
    action = callback_data.get('action')

    if cbq.from_user not in [member.user for member in await dp.bot.get_chat_administrators(chat_id)]:
        await cbq.answer('–í—ã —É–∂–µ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞!')
        return await cbq.message.delete()

    if action in ['yes', 'no']:
        if action == 'yes':
            await db.set_chat(chat_id, is_show_dead_roles=1)
        elif action == 'no':
            await db.set_chat(chat_id, is_show_dead_roles=0)
        await cbq.answer('–£—Å–ø–µ—à–Ω–æ!')
        chat_data: Chat = await db.get_chat(chat_id)
        await cbq.message.edit_text('–û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n\n'
                                    f"{hbold('–ü–∏–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')}: {'–î–∞' if chat_data.is_pin_register else '–ù–µ—Ç'}\n"
                                    f"{hbold('–ë—É—Å—Ç–µ—Ä—ã')}: {'–î–∞' if chat_data.is_active_boosts else '–ù–µ—Ç'}\n"
                                    f"{hbold('–ü–æ–∫–∞–∑ —Ä–æ–ª–µ–π')}: {'–î–∞' if chat_data.is_show_dead_roles else '–ù–µ—Ç'}\n"
                                    f"{hbold('–¢–∞–π–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ')}: {'–î–∞' if chat_data.is_show_day_votes else '–ù–µ—Ç'}\n"
                                    f"{hbold('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')}: {'–î–∞' if chat_data.is_show_hello_msg else '–ù–µ—Ç'}\n"
                                    f"{hbold('–†–∞–∑—Ä–µ—à–∞—Ç—å –º–µ–¥–∏–∞ –ø—Ä–∏ —Ä–∞–∑–º—É—Ç–µ')}: {'–î–∞' if chat_data.is_allow_attachments_unmute else '–ù–µ—Ç'}",
                                    reply_markup=settings_kb_some(chat_id))
    else:
        await cbq.answer('–û—à–∏–±–∫–∞ stg_show_roles')


@dp.callback_query_handler(settings_show_votes_callback.filter())
async def stg_show_votes(cbq: types.CallbackQuery, callback_data: dict):
    chat_id = int(callback_data.get('chat_id'))
    action = callback_data.get('action')

    if cbq.from_user not in [member.user for member in await dp.bot.get_chat_administrators(chat_id)]:
        await cbq.answer('–í—ã —É–∂–µ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞!')
        return await cbq.message.delete()

    if action in ['yes', 'no']:
        if action == 'yes':
            await db.set_chat(chat_id, is_show_day_votes=1)
        elif action == 'no':
            await db.set_chat(chat_id, is_show_day_votes=0)
        await cbq.answer('–£—Å–ø–µ—à–Ω–æ!')
        chat_data: Chat = await db.get_chat(chat_id)
        await cbq.message.edit_text('–û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n\n'
                                    f"{hbold('–ü–∏–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')}: {'–î–∞' if chat_data.is_pin_register else '–ù–µ—Ç'}\n"
                                    f"{hbold('–ë—É—Å—Ç–µ—Ä—ã')}: {'–î–∞' if chat_data.is_active_boosts else '–ù–µ—Ç'}\n"
                                    f"{hbold('–ü–æ–∫–∞–∑ —Ä–æ–ª–µ–π')}: {'–î–∞' if chat_data.is_show_dead_roles else '–ù–µ—Ç'}\n"
                                    f"{hbold('–¢–∞–π–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ')}: {'–î–∞' if chat_data.is_show_day_votes else '–ù–µ—Ç'}\n"
                                    f"{hbold('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')}: {'–î–∞' if chat_data.is_show_hello_msg else '–ù–µ—Ç'}\n"
                                    f"{hbold('–†–∞–∑—Ä–µ—à–∞—Ç—å –º–µ–¥–∏–∞ –ø—Ä–∏ —Ä–∞–∑–º—É—Ç–µ')}: {'–î–∞' if chat_data.is_allow_attachments_unmute else '–ù–µ—Ç'}",
                                    reply_markup=settings_kb_some(chat_id))
    else:
        await cbq.answer('–û—à–∏–±–∫–∞ stg_show_votes')


@dp.callback_query_handler(settings_show_hello_msg_callback.filter())
async def stg_show_votes(cbq: types.CallbackQuery, callback_data: dict):
    chat_id = int(callback_data.get('chat_id'))
    action = callback_data.get('action')

    if cbq.from_user not in [member.user for member in await dp.bot.get_chat_administrators(chat_id)]:
        await cbq.answer('–í—ã —É–∂–µ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞!')
        return await cbq.message.delete()

    if action in ['yes', 'no']:
        if action == 'yes':
            await db.set_chat(chat_id, is_show_hello_msg=1)
        elif action == 'no':
            await db.set_chat(chat_id, is_show_hello_msg=0)
        await cbq.answer('–£—Å–ø–µ—à–Ω–æ!')
        chat_data: Chat = await db.get_chat(chat_id)
        await cbq.message.edit_text('–û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n\n'
                                    f"{hbold('–ü–∏–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')}: {'–î–∞' if chat_data.is_pin_register else '–ù–µ—Ç'}\n"
                                    f"{hbold('–ë—É—Å—Ç–µ—Ä—ã')}: {'–î–∞' if chat_data.is_active_boosts else '–ù–µ—Ç'}\n"
                                    f"{hbold('–ü–æ–∫–∞–∑ —Ä–æ–ª–µ–π')}: {'–î–∞' if chat_data.is_show_dead_roles else '–ù–µ—Ç'}\n"
                                    f"{hbold('–¢–∞–π–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ')}: {'–î–∞' if chat_data.is_show_day_votes else '–ù–µ—Ç'}\n"
                                    f"{hbold('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')}: {'–î–∞' if chat_data.is_show_hello_msg else '–ù–µ—Ç'}\n"
                                    f"{hbold('–†–∞–∑—Ä–µ—à–∞—Ç—å –º–µ–¥–∏–∞ –ø—Ä–∏ —Ä–∞–∑–º—É—Ç–µ')}: {'–î–∞' if chat_data.is_allow_attachments_unmute else '–ù–µ—Ç'}",
                                    reply_markup=settings_kb_some(chat_id))
    else:
        await cbq.answer('–û—à–∏–±–∫–∞ stg_show_hello_msg')


@dp.callback_query_handler(settings_allow_att_callback.filter())
async def stg_show_votes(cbq: types.CallbackQuery, callback_data: dict):
    chat_id = int(callback_data.get('chat_id'))
    action = callback_data.get('action')

    if cbq.from_user not in [member.user for member in await dp.bot.get_chat_administrators(chat_id)]:
        await cbq.answer('–í—ã —É–∂–µ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞!')
        return await cbq.message.delete()

    if action in ['yes', 'no']:
        if action == 'yes':
            await db.set_chat(chat_id, is_allow_att_unmute=1)
        elif action == 'no':
            await db.set_chat(chat_id, is_allow_att_unmute=0)
        await cbq.answer('–£—Å–ø–µ—à–Ω–æ!')
        chat_data: Chat = await db.get_chat(chat_id)
        await cbq.message.edit_text('–û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n\n'
                                    f"{hbold('–ü–∏–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')}: {'–î–∞' if chat_data.is_pin_register else '–ù–µ—Ç'}\n"
                                    f"{hbold('–ë—É—Å—Ç–µ—Ä—ã')}: {'–î–∞' if chat_data.is_active_boosts else '–ù–µ—Ç'}\n"
                                    f"{hbold('–ü–æ–∫–∞–∑ —Ä–æ–ª–µ–π')}: {'–î–∞' if chat_data.is_show_dead_roles else '–ù–µ—Ç'}\n"
                                    f"{hbold('–¢–∞–π–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ')}: {'–î–∞' if chat_data.is_show_day_votes else '–ù–µ—Ç'}\n"
                                    f"{hbold('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')}: {'–î–∞' if chat_data.is_show_hello_msg else '–ù–µ—Ç'}\n"
                                    f"{hbold('–†–∞–∑—Ä–µ—à–∞—Ç—å –º–µ–¥–∏–∞ –ø—Ä–∏ —Ä–∞–∑–º—É—Ç–µ')}: {'–î–∞' if chat_data.is_allow_attachments_unmute else '–ù–µ—Ç'}",
                                    reply_markup=settings_kb_some(chat_id))
    else:
        await cbq.answer('–û—à–∏–±–∫–∞ stg_allow_unmute_msg')
